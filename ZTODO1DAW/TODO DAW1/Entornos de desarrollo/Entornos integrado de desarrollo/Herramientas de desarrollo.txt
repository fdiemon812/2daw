Herramientas de desarrollo
Responde a las siguientes preguntas y súbelas a tu repositorio Apuntes_ED.

Introducción
¿Para que sirve un compilador? ¿Qué tipo de archivo obtenemos tras compilar?

¿Para que sirve un enlazador? ¿Qué tipo de archivo obtenemos tras enlazar?

¿Para que sirve un interprete? ¿Obtenemos algún archivo tras interpretar?

Explica cada uno de los siguientes conceptos e indica la relación entre ellos.

código fuente
código objeto
código binario
¿Qué tipo de código es el bytecode generado por el compilador de Java?

Herramientas de desarrollo
Ejecuta el programa "Hola mundo" en los siguientes lenguajes:

bash
python
php
javascript (nodejs)
c
c++
java
ruby
go
rust
lisp
ensamblador (nasm)
Los paquetes a instalar en Ubuntu son: python, php, nodejs, gcc, g++, default-jdk, default-jre, ruby, golang, rustc , clisp y nasm. Para instalar dichos paquetes puedes utilizar sudo apt-get install <nombre del paquete>. Si habéis instalado Java en el módulo de Programación, no instaléis los paquetes default-jdk y default-jre.

El código fuente para distintos lenguajes de programación está disponible en:https://es.wikipedia.org/wiki/Anexo:Ejemplos_de_implementaci%C3%B3n_del_%C2%ABHola_mundo%C2%BB

Instrucciones en https://github.com/jamj2000/DAW1-ED-HolaMundo.

Para cada uno de los lenguajes anteriores, indica el proceso realizado para conseguir ejecutar el código: ¿compilación o interpretación?

Para cada uno de los lenguajes anteriores, indica el nombre del compilador o interprete utilizado en GNU/Linux.

Investiga y averigua que extensión tienen los archivos de código fuente de los siguientes lenguajes:

bash
python
php
javascript
c
c++
java
ensamblador
ruby
go
rust
lisp
Scripts ejecutables para los lenguajes interpretados. Edita los scripts para los siguientes lenguajes:

bash
python
php
javascript
java
ruby
go
rust
lisp
Instrucciones en https://github.com/jamj2000/DAW1-ED-HolaMundo.

¿Qué extensión tienen los archivos de código objeto?

Lenguaje C. Código en varios archivos. Obtener el código objeto a partir del código fuente de los 3 archivos siguientes:

//-------------
// datos.c
//-------------

char *mensaje="Hola a todos y todas";
int  num1 = 8;
int  num2 = 10;
//-------------
// suma.c
//-------------

int suma (int a, int b) {
  return a + b;
}
//-------------
// main.c
//-------------

#include <stdio.h>

int suma (int a, int b);

extern char *mensaje;
extern int  num1, num2;

int main(){
  printf("%s\n", mensaje);
  printf("%d\n", suma (num1, num2) );
  return 0;
}
# Para obtener código objeto

gcc  -c  main.c  datos.c  suma.c
Deberemos obtener 3 archivos: main.o, suma.o y datos.o

Lenguaje C. Código en varios archivos. Obtener el código binario ejecutable a partir del código objeto de los 3 archivos anteriores:

# Para obtener código binario

gcc  -o  programa  main.o  datos.o  suma.o
Deberememos obtener un archivo programa binario ejecutable. Si lo ejecutamos obtenemos el siguiente resultado:

./programa
Hola a todos y todas
18
Lenguaje C++. Código en varios archivos. Obtener el código objeto a partir del código fuente de los 3 archivos siguientes:

//-------------
// datos.cpp
//-------------
# include <string>

std::string mensaje = "Hola a todos y todas";

int  num1 = 8;
int  num2 = 10;
//-------------
// main.cpp
//-------------
#include <iostream>

using namespace std;

int suma (int a, int b);

extern string mensaje;
extern int  num1, num2;

int main(){
  cout << mensaje << endl;
  cout << suma (num1, num2) << endl;
  return 0;
}
//-------------
// suma.cpp
//-------------
int suma (int a, int b) {
  return a + b;
}
# Para obtener código objeto

g++  -c  main.cpp  datos.cpp  suma.cpp
Deberemos obtener 3 archivos: main.o, suma.o y datos.o

Lenguaje C++. Código en varios archivos. Obtener el código binario ejecutable a partir del código objeto de los 3 archivos anteriores:

# Para obtener código binario

g++  -o  programa  main.o  datos.o  suma.o
Deberememos obtener un archivo programa binario ejecutable. Si lo ejecutamos obtenemos el siguiente resultado:

./programa
Hola a todos y todas
18
Bibliotecas. Define que se entiende por biblioteca o librería y los tipos que existen.

Bibliotecas. ¿Qué tipo es el más utilizado actualmente? ¿Por qué?

Más información en https://github.com/jamj2000/DAW1-ED-Bibliotecas

Bibliotecas. Crea una biblioteca dinámica en C que proporcione las funciones para sumar, restar, multiplicar y dividir 2 números enteros. Crea un programa que haga uso de ella y comprueba que se ejecuta correctamente.

Instrucciones en https://github.com/jamj2000/DAW1-ED-Bibliotecas

Bibliotecas. Crea una biblioteca dinámica en Java que proporcione las funciones para sumar, restar, multiplicar y dividir 2 números enteros. Crea un programa que haga uso de ella y comprueba que se ejecuta correctamente.

Instrucciones en https://github.com/jamj2000/DAW1-ED-Bibliotecas

Bibliotecas. Busca información y explica las ventajas y desventajas de usar bibliotecas estáticas.

Bibliotecas. Busca información y explica las ventajas y desventajas de usar bibliotecas dinámicas.

Build. Automatiza el proceso de compilación de ejecutable y biblioteca, su enlazado y la generación del archivo ejecutable para código fuente en C con make. Haz uso de un buildfile.

Instrucciones en https://github.com/jamj2000/DAW1-ED-Bibliotecas/blob/master/Build.md

Build. Automatiza el proceso de compilación de ejecutable y biblioteca, su enlazado y la generación del archivo .jar para código fuente en Java con Ant. Haz uso de un buildfile.

Instrucciones en https://github.com/jamj2000/DAW1-ED-Bibliotecas/blob/master/Build.md

Build. Automatiza el proceso de compilación de ejecutable y biblioteca, su enlazado y la generación del archivo .jar para código fuente en Java con Maven. Haz uso de un buildfile.

Instrucciones en https://github.com/jamj2000/DAW1-ED-Bibliotecas/blob/master/Maven.md

Build. Automatiza el proceso de compilación de ejecutable y biblioteca, su enlazado y la generación del archivo .jar para código fuente en Java con Gradle. Haz uso de un buildfile.

Instrucciones en https://github.com/jamj2000/DAW1-ED-Bibliotecas/blob/master/Gradle.md

CMake. Automatiza el proceso de compilación de ejecutable y bibliotecas, su enlazado y la generación del archivo ejecutable para código fuente en C++. Crea un buildfile con CMake.

Instrucciones en https://github.com/jamj2000/DAW1-ED-Bibliotecas/blob/master/CMake.md